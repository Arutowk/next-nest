model User {
  id            String     @id @default(cuid())
  email         String?     @unique
  password      String?
  name          String?
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(CANDIDATE) // 用户角色（面试官或候选人）
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // 作为面试官发起的面试
  interviewsHosted Interview[] @relation("InterviewHost") 
  // 作为候选人参与的面试
  interviewsTaken  Interview[] @relation("InterviewCandidate")

  feedbacksAsInterviewer Feedback[] @relation("FeedbackInterviewer") // 作为面试官给出的反馈
  feedbacksAsCandidate   Feedback[] @relation("FeedbackCandidate")   // 作为候选人收到的反馈
  @@index([email]) // 加速登录查询
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

enum UserRole {
  INTERVIEWER
  CANDIDATE
}
